# bot.py
# -*- coding: utf-8 -*-
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: aiogram>=3.10,<4.0  (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Python 3.13)
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install "aiogram>=3.10,<4.0"
# –ó–∞–ø—É—Å–∫:    python bot.py

import asyncio
import logging
import sqlite3
from datetime import datetime, UTC

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# =======================
# ‚öôÔ∏è –ö–û–ù–§–ò–ì –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =======================
BOT_TOKEN = "8338911717:AAEqkGso9HnXw3hd8W2Hn4gr7iOdag35838"
ADMIN_ID = 8143233139  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CHANNEL_ID = -1003167742288  # ID –∫–∞–Ω–∞–ª–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã ‚Äî –¢–û–õ–¨–ö–û –¢–ò–ù–¨–ö–û–§–§
DEFAULT_PRICE = "500 ‚ÇΩ"  # –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å)
PAYMENT_DETAILS = """
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
üè¶ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: 2200701966220961
(–ú–∞—Ç–≤–µ–π –ú.)
"""

# –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–∫–æ–¥ -> —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç)
REJECT_PRESETS = {
    "casino": "–ö–∞–∑–∏–Ω–æ/—Å—Ç–∞–≤–∫–∏",
    "18plus": "–ö–æ–Ω—Ç–µ–Ω—Ç 18+",
    "fraud": "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
    "abuse": "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è/–æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "duplicate": "–î—É–±–ª–∏–∫–∞—Ç/—Å–ø–∞–º",
    "badpay": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
}

# ===============
# üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ===============
logging.basicConfig(level=logging.INFO)

# ===================
# üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–• (SQLite)
# ===================
DB_PATH = "bot_data.sqlite3"

def db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = db()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS settings (
        key TEXT PRIMARY KEY,
        value TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS vacancies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        created_at TEXT,
        receipt_msg_id INTEGER,
        receipt_text TEXT,
        title TEXT,
        pay TEXT,
        description TEXT,
        contact TEXT,
        status TEXT,            -- draft|pending|approved|rejected|posted
        admin_comment TEXT
    )
    """)
    cur.execute("INSERT OR IGNORE INTO settings(key, value) VALUES('price', ?)", (DEFAULT_PRICE,))
    cur.execute("INSERT OR IGNORE INTO settings(key, value) VALUES('payment_details', ?)", (PAYMENT_DETAILS,))
    conn.commit()
    conn.close()

def get_setting(key, default=""):
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT value FROM settings WHERE key=?", (key,))
    row = cur.fetchone()
    conn.close()
    return row["value"] if row else default

def set_setting(key, value):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO settings(key, value) VALUES(?, ?) "
        "ON CONFLICT(key) DO UPDATE SET value=excluded.value",
        (key, value)
    )
    conn.commit()
    conn.close()

def create_vacancy(user_id, username):
    conn = db()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO vacancies (user_id, username, created_at, status)
        VALUES (?, ?, ?, 'draft')
    """, (user_id, username or "", datetime.now(UTC).isoformat()))
    vid = cur.lastrowid
    conn.commit()
    conn.close()
    return vid

def update_vacancy(vid, **kwargs):
    if not kwargs:
        return
    fields = ", ".join([f"{k}=?" for k in kwargs.keys()])
    values = list(kwargs.values()) + [vid]
    conn = db()
    cur = conn.cursor()
    cur.execute(f"UPDATE vacancies SET {fields} WHERE id=?", values)
    conn.commit()
    conn.close()

def get_vacancy(vid):
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM vacancies WHERE id=?", (vid,))
    row = cur.fetchone()
    conn.close()
    return row

# ==========================
# üß≠ –°–û–°–¢–û–Ø–ù–ò–Ø (FSM)
# ==========================
class CreateFlow(StatesGroup):
    WaitingReceipt = State()
    WaitingTitle = State()
    WaitingPay = State()
    WaitingDescription = State()
    WaitingContact = State()
    WaitingUserConfirm = State()

class AdminEdit(StatesGroup):
    WaitingNewPrice = State()
    WaitingNewDetails = State()
    WaitingRejectReason = State()  # —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã

# ==========================
# üß© –£–¢–ò–õ–ò–¢–´/–ö–ù–û–ü–ö–ò
# ==========================
def start_kb_and_caption():
    price = get_setting("price", DEFAULT_PRICE)
    kb = InlineKeyboardBuilder()
    kb.button(text="–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid")
    kb.button(text="–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫?", callback_data="how_receipt")
    kb.button(text="–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post")
    kb.button(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    kb.adjust(1, 1, 1, 1)
    caption = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: <b>{price}</b>\n\n{get_setting('payment_details', PAYMENT_DETAILS)}"
    return kb.as_markup(), caption

def admin_panel_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="admin_set_price")
    kb.button(text="–°–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="admin_set_details")
    kb.adjust(1, 1)
    return kb.as_markup()

def approval_kb(vacancy_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{vacancy_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{vacancy_id}")
    kb.adjust(2)
    return kb.as_markup()

def reject_reasons_kb(vacancy_id: int):
    kb = InlineKeyboardBuilder()
    # –ø—Ä–µ—Å–µ—Ç—ã –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    kb.button(text="–ö–∞–∑–∏–Ω–æ/—Å—Ç–∞–≤–∫–∏", callback_data=f"reject_reason:{vacancy_id}:casino")
    kb.button(text="–ö–æ–Ω—Ç–µ–Ω—Ç 18+", callback_data=f"reject_reason:{vacancy_id}:18plus")
    kb.button(text="–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data=f"reject_reason:{vacancy_id}:fraud")
    kb.button(text="–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–µ", callback_data=f"reject_reason:{vacancy_id}:abuse")
    kb.button(text="–î—É–±–ª–∏–∫–∞—Ç/—Å–ø–∞–º", callback_data=f"reject_reason:{vacancy_id}:duplicate")
    kb.button(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data=f"reject_reason:{vacancy_id}:badpay")
    kb.adjust(2, 2, 2)
    # –ø—Ä–æ—á–µ–µ / –æ—Ç–º–µ–Ω–∞
    kb.button(text="–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞‚Ä¶", callback_data=f"reject_other:{vacancy_id}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data=f"reject_cancel:{vacancy_id}")
    kb.adjust(2)
    return kb.as_markup()

def yes_no_kb(vacancy_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ", callback_data=f"user_send:{vacancy_id}")
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å ‚úèÔ∏è", callback_data=f"user_edit:{vacancy_id}")
    kb.button(text="–û—Ç–º–µ–Ω–∞ üö´", callback_data=f"user_cancel:{vacancy_id}")
    kb.adjust(1, 2)
    return kb.as_markup()

def format_vacancy_post(row: sqlite3.Row):
    return (
        f"üíº <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {row['title']}\n"
        f"üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> {row['pay']}\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {row['description']}\n"
        f"üì© <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {row['contact']}"
    )

# ==========================
# üß† –†–û–£–¢–ï–†–´ –ò –•–ï–ù–î–õ–ï–†–´
# ==========================
router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    kb, caption = start_kb_and_caption()
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –±–∏—Ä–∂–∏ –≤–∞–∫–∞–Ω—Å–∏–π.\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1) –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ.\n"
        "2) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —á–µ–∫.\n"
        "3) –ó–∞–ø–æ–ª–Ω—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
        "4) –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç ‚Äî –∏ –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ."
    )
    await message.answer(greeting)
    await message.answer(caption, reply_markup=kb)

@router.callback_query(F.data == "how_receipt")
async def cb_how_receipt(call: types.CallbackQuery):
    await call.answer()
    text = (
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω/—Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º: —Å—É–º–º–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã, –¥–∞—Ç–∞/–≤—Ä–µ–º—è.\n"
        "–ü–æ—Å–ª–µ —á–µ–∫–∞ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
    )
    await call.message.answer(text)

@router.callback_query(F.data == "new_post")
async def cb_new_post(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    vid = create_vacancy(call.from_user.id, call.from_user.username)
    await state.update_data(vacancy_id=vid)
    await state.set_state(CreateFlow.WaitingReceipt)
    price = get_setting("price", DEFAULT_PRICE)
    await call.message.answer(
        f"–°–æ–∑–¥–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ #{vid}.\n–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ (<b>{price}</b>). "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–ª–∞—Ç–µ–∂–∞."
    )

@router.callback_query(F.data == "paid")
async def cb_paid(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    vid = create_vacancy(call.from_user.id, call.from_user.username)
    await state.update_data(vacancy_id=vid)
    await state.set_state(CreateFlow.WaitingReceipt)
    await call.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ #{vid}.\n–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ (—Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω) –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞."
    )

@router.message(CreateFlow.WaitingReceipt, F.content_type.in_({"photo", "text", "document"}))
async def on_receipt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    vid = data.get("vacancy_id")
    if not vid:
        vid = create_vacancy(message.from_user.id, message.from_user.username)
        await state.update_data(vacancy_id=vid)

    receipt_text = None
    receipt_msg_id = None

    if message.photo:
        receipt_msg_id = message.message_id
    else:
        receipt_text = (message.text or message.caption or "").strip() or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"

    update_vacancy(vid, receipt_msg_id=receipt_msg_id, receipt_text=receipt_text)
    await state.set_state(CreateFlow.WaitingTitle)
    await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –£–∫–∞–∂–∏—Ç–µ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>:")

@router.message(CreateFlow.WaitingTitle, F.text)
async def on_title(message: types.Message, state: FSMContext):
    vid = (await state.get_data()).get("vacancy_id")
    update_vacancy(vid, title=message.text.strip())
    await state.set_state(CreateFlow.WaitingPay)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ <b>–û–ø–ª–∞—Ç—É</b> (—Å—É–º–º–∞/–¥–∏–∞–ø–∞–∑–æ–Ω/—É—Å–ª–æ–≤–∏—è):")

@router.message(CreateFlow.WaitingPay, F.text)
async def on_pay(message: types.Message, state: FSMContext):
    vid = (await state.get_data()).get("vacancy_id")
    update_vacancy(vid, pay=message.text.strip())
    await state.set_state(CreateFlow.WaitingDescription)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ <b>–û–ø–∏—Å–∞–Ω–∏–µ</b> –≤–∞–∫–∞–Ω—Å–∏–∏:")

@router.message(CreateFlow.WaitingDescription, F.text)
async def on_description(message: types.Message, state: FSMContext):
    vid = (await state.get_data()).get("vacancy_id")
    update_vacancy(vid, description=message.text.strip())
    await state.set_state(CreateFlow.WaitingContact)
    await message.answer("–•–æ—Ä–æ—à–æ. –£–∫–∞–∂–∏—Ç–µ <b>–∫–æ–Ω—Ç–∞–∫—Ç</b> (Telegram @–Ω–∏–∫, email, —Ñ–æ—Ä–º–∞ –∏ —Ç.–ø.):")

@router.message(CreateFlow.WaitingContact, F.text)
async def on_contact(message: types.Message, state: FSMContext):
    vid = (await state.get_data()).get("vacancy_id")
    update_vacancy(vid, contact=message.text.strip())
    row = get_vacancy(vid)
    preview = "–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç:\n\n" + format_vacancy_post(row)
    await message.answer(preview, reply_markup=yes_no_kb(vid))
    await state.set_state(CreateFlow.WaitingUserConfirm)

@router.callback_query(CreateFlow.WaitingUserConfirm, F.data.startswith("user_send:"))
async def cb_user_send(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer()
    vid = int(call.data.split(":")[1])
    update_vacancy(vid, status="pending")
    row = get_vacancy(vid)

    text = (
        f"üìù <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b> (#{vid}) –æ—Ç @{row['username'] or call.from_user.id}\n\n"
        + format_vacancy_post(row)
        + "\n\n–ß–µ–∫: "
        + ("—Ñ–æ—Ç–æ (–ø–µ—Ä–µ—à–ª—ë–º —Å–ª–µ–¥–æ–º)" if row["receipt_msg_id"] else (row["receipt_text"] or "–Ω–µ—Ç"))
    )
    await bot.send_message(ADMIN_ID, text, reply_markup=approval_kb(vid))

    if row["receipt_msg_id"]:
        try:
            await bot.forward_message(ADMIN_ID, call.message.chat.id, row["receipt_msg_id"])
        except Exception:
            pass

    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await call.message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.clear()

@router.callback_query(CreateFlow.WaitingUserConfirm, F.data.startswith("user_edit:"))
async def cb_user_edit(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    vid = int(call.data.split(":")[1])
    await call.message.answer(
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        f"- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ –ø–æ –ø–æ—Ä—è–¥–∫—É.\n"
        f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å –Ω–∞—á–Ω—ë—Ç—Å—è —Å <b>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>."
    )
    await state.update_data(vacancy_id=vid)
    await state.set_state(CreateFlow.WaitingTitle)
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@router.callback_query(CreateFlow.WaitingUserConfirm, F.data.startswith("user_cancel:"))
async def cb_user_cancel(call: types.CallbackQuery, state: FSMContext):
    await call.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    await state.clear()
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

# ================
# üë®‚Äç‚úàÔ∏è –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
# ================
@router.callback_query(F.data == "admin_panel")
async def cb_admin_panel(call: types.CallbackQuery):
    await call.answer()
    if call.from_user.id != ADMIN_ID:
        await call.message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    price = get_setting("price", DEFAULT_PRICE)
    details = get_setting("payment_details", PAYMENT_DETAILS)
    await call.message.answer(
        f"<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{price}</b>\n\n–¢–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n{details}",
        reply_markup=admin_panel_kb()
    )

@router.callback_query(F.data == "admin_set_price")
async def cb_admin_set_price(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.from_user.id != ADMIN_ID:
        await call.message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    await state.set_state(AdminEdit.WaitingNewPrice)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 700 ‚ÇΩ):")

@router.message(AdminEdit.WaitingNewPrice, F.text)
async def on_admin_new_price(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    set_setting("price", message.text.strip())
    await state.clear()
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{message.text.strip()}</b>")

@router.callback_query(F.data == "admin_set_details")
async def cb_admin_set_details(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.from_user.id != ADMIN_ID:
        await call.message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    await state.set_state(AdminEdit.WaitingNewDetails)
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (—Ç–µ–∫—Å—Ç–æ–º). –ü—Ä–∏–º–µ—Ä:\n"
        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\nüè¶ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: 2200...\n(–ò–º—è –§.)"
    )

@router.message(AdminEdit.WaitingNewDetails, F.text)
async def on_admin_new_details(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    text = message.text.strip()
    set_setting("payment_details", text)
    await state.clear()
    await message.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# ======================
# ‚úÖ/‚ùå –ú–û–î–ï–†–ê–¶–ò–Ø –ê–î–ú–ò–ù–ê
# ======================
@router.callback_query(F.data.startswith("approve:"))
async def cb_admin_approve(call: types.CallbackQuery, bot: Bot):
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return
    _, sid = call.data.split(":")
    vid = int(sid)
    row = get_vacancy(vid)
    if not row:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    post_text = format_vacancy_post(row)
    try:
        msg = await bot.send_message(CHANNEL_ID, post_text, disable_web_page_preview=True)
        update_vacancy(vid, status="posted", admin_comment="approved")
        try:
            await call.message.edit_text((call.message.text or "") + "\n\n‚úÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ</b>")
        except Exception:
            await call.message.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        try:
            await bot.send_message(row["user_id"], f"‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {msg.chat.title}")
        except Exception:
            pass
    except Exception as e:
        update_vacancy(vid, status="approved", admin_comment=f"approve_error: {e}")
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ (–ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª).")

@router.callback_query(F.data.startswith("reject:"))
async def cb_admin_reject_menu(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏—á–∏–Ω—ã + –∫–Ω–æ–ø–∫–∏ '–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞‚Ä¶' –∏ '–û—Ç–º–µ–Ω–∞'."""
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return
    _, sid = call.data.split(":")
    vid = int(sid)
    if not get_vacancy(vid):
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    await state.update_data(reject_vid=vid, mod_message_id=call.message.message_id, mod_chat_id=call.message.chat.id)
    await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{vid}:", reply_markup=reject_reasons_kb(vid))
    await call.answer()

@router.callback_query(F.data.startswith("reject_cancel:"))
async def cb_admin_reject_cancel(call: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."""
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return
    await state.update_data(reject_vid=None, mod_message_id=None, mod_chat_id=None)
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@router.callback_query(F.data.startswith("reject_other:"))
async def cb_admin_reject_other(call: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã."""
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return
    _, sid = call.data.split(":")
    vid = int(sid)
    await state.update_data(reject_vid=vid, mod_message_id=call.message.message_id, mod_chat_id=call.message.chat.id)
    await state.set_state(AdminEdit.WaitingRejectReason)
    await call.message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{vid} –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await call.answer()

@router.callback_query(F.data.startswith("reject_reason:"))
async def cb_admin_reject_preset(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã."""
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return
    _, sid, code = call.data.split(":")
    vid = int(sid)
    row = get_vacancy(vid)
    if not row:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    reason = REJECT_PRESETS.get(code, "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    update_vacancy(vid, status="rejected", admin_comment=reason)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    try:
        await bot.send_message(row["user_id"], f"‚ùå <b>–í–∞—à –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception:
        pass

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try:
        await call.message.edit_text((call.message.text or "") + f"\n\n‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception:
        await call.message.answer(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ #{vid}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    await call.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await state.clear()

@router.message(AdminEdit.WaitingRejectReason, F.text)
async def on_admin_reject_reason(message: types.Message, state: FSMContext, bot: Bot):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã, –æ—Ç–∫–ª–æ–Ω—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return

    data = await state.get_data()
    vid = int(data.get("reject_vid"))
    row = get_vacancy(vid)
    if not row:
        await state.clear()
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    reason = message.text.strip() or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    update_vacancy(vid, status="rejected", admin_comment=reason)

    # 1) –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    try:
        await bot.send_message(row["user_id"], f"‚ùå <b>–í–∞—à –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception:
        pass

    # 2) –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–ø–æ–ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞)
    try:
        await bot.edit_message_text(
            chat_id=data.get("mod_chat_id"),
            message_id=data.get("mod_message_id"),
            text=(f"üìù <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b> (#{vid}) –æ—Ç @{row['username'] or row['user_id']}\n\n"
                  + format_vacancy_post(row)
                  + f"\n\n‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        )
    except Exception:
        await message.answer(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ #{vid}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{vid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()

# ======================
# üèÅ /help –∏ –¥–µ—Ñ–æ–ª—Ç—ã
# ======================
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    kb, caption = start_kb_and_caption()
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–æ—Ü–µ—Å—Å: –æ–ø–ª–∞—Ç–∞ ‚Üí —á–µ–∫ ‚Üí –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ‚Üí –º–æ–¥–µ—Ä–∞—Ü–∏—è ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è.",
    )
    await message.answer(caption, reply_markup=kb)

@router.message()
async def fallback(message: types.Message):
    if message.text and message.text.startswith("/"):
        return
    kb, _ = start_kb_and_caption()
    await message.answer("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª –∏–ª–∏ ¬´–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç¬ª.", reply_markup=kb)

# ===============
# üöÄ MAIN
# ===============
async def main():
    init_db()
    bot = Bot(
        BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
